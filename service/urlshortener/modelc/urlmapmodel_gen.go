// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package modelc

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	urlMapFieldNames          = builder.RawFieldNames(&UrlMap{})
	urlMapRows                = strings.Join(urlMapFieldNames, ",")
	urlMapRowsExpectAutoSet   = strings.Join(stringx.Remove(urlMapFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	urlMapRowsWithPlaceHolder = strings.Join(stringx.Remove(urlMapFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUrlMapIdPrefix         = "cache:urlMap:id:"
	cacheUrlMapLongUrlMd5Prefix = "cache:urlMap:longUrlMd5:"
	cacheUrlMapShortUrlPrefix   = "cache:urlMap:shortUrl:"
)

type (
	urlMapModel interface {
		Insert(ctx context.Context, data *UrlMap) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UrlMap, error)
		FindOneByLongUrlMd5(ctx context.Context, longUrlMd5 string) (*UrlMap, error)
		FindOneByShortUrl(ctx context.Context, shortUrl string) (*UrlMap, error)
		Update(ctx context.Context, data *UrlMap) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUrlMapModel struct {
		sqlc.CachedConn
		table string
	}

	UrlMap struct {
		Id         uint64    `db:"id"`
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
		LongUrl    string    `db:"long_url"`
		LongUrlMd5 string    `db:"long_url_md5"`
		ShortUrl   string    `db:"short_url"`
	}
)

func newUrlMapModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUrlMapModel {
	return &defaultUrlMapModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`url_map`",
	}
}

func (m *defaultUrlMapModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	urlMapIdKey := fmt.Sprintf("%s%v", cacheUrlMapIdPrefix, id)
	urlMapLongUrlMd5Key := fmt.Sprintf("%s%v", cacheUrlMapLongUrlMd5Prefix, data.LongUrlMd5)
	urlMapShortUrlKey := fmt.Sprintf("%s%v", cacheUrlMapShortUrlPrefix, data.ShortUrl)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, urlMapIdKey, urlMapLongUrlMd5Key, urlMapShortUrlKey)
	return err
}

func (m *defaultUrlMapModel) FindOne(ctx context.Context, id uint64) (*UrlMap, error) {
	urlMapIdKey := fmt.Sprintf("%s%v", cacheUrlMapIdPrefix, id)
	var resp UrlMap
	err := m.QueryRowCtx(ctx, &resp, urlMapIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", urlMapRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlMapModel) FindOneByLongUrlMd5(ctx context.Context, longUrlMd5 string) (*UrlMap, error) {
	urlMapLongUrlMd5Key := fmt.Sprintf("%s%v", cacheUrlMapLongUrlMd5Prefix, longUrlMd5)
	var resp UrlMap
	err := m.QueryRowIndexCtx(ctx, &resp, urlMapLongUrlMd5Key, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `long_url_md5` = ? limit 1", urlMapRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, longUrlMd5); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlMapModel) FindOneByShortUrl(ctx context.Context, shortUrl string) (*UrlMap, error) {
	urlMapShortUrlKey := fmt.Sprintf("%s%v", cacheUrlMapShortUrlPrefix, shortUrl)
	var resp UrlMap
	err := m.QueryRowIndexCtx(ctx, &resp, urlMapShortUrlKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `short_url` = ? limit 1", urlMapRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, shortUrl); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlMapModel) Insert(ctx context.Context, data *UrlMap) (sql.Result, error) {
	urlMapIdKey := fmt.Sprintf("%s%v", cacheUrlMapIdPrefix, data.Id)
	urlMapLongUrlMd5Key := fmt.Sprintf("%s%v", cacheUrlMapLongUrlMd5Prefix, data.LongUrlMd5)
	urlMapShortUrlKey := fmt.Sprintf("%s%v", cacheUrlMapShortUrlPrefix, data.ShortUrl)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, urlMapRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LongUrl, data.LongUrlMd5, data.ShortUrl)
	}, urlMapIdKey, urlMapLongUrlMd5Key, urlMapShortUrlKey)
	return ret, err
}

func (m *defaultUrlMapModel) Update(ctx context.Context, newData *UrlMap) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	urlMapIdKey := fmt.Sprintf("%s%v", cacheUrlMapIdPrefix, data.Id)
	urlMapLongUrlMd5Key := fmt.Sprintf("%s%v", cacheUrlMapLongUrlMd5Prefix, data.LongUrlMd5)
	urlMapShortUrlKey := fmt.Sprintf("%s%v", cacheUrlMapShortUrlPrefix, data.ShortUrl)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, urlMapRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.LongUrl, newData.LongUrlMd5, newData.ShortUrl, newData.Id)
	}, urlMapIdKey, urlMapLongUrlMd5Key, urlMapShortUrlKey)
	return err
}

func (m *defaultUrlMapModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUrlMapIdPrefix, primary)
}

func (m *defaultUrlMapModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", urlMapRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUrlMapModel) tableName() string {
	return m.table
}
